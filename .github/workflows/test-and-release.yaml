name: Test and Release

on: push

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: eu-central-1
  AWS_REGION: eu-central-1
  STACK_NAME: test-${{ github.sha }}
  CI: 1
  FORCE_COLOR: 3
  TWILIO_API_KEY: ${{ secrets.TWILIO_API_KEY }}
  TWILIO_API_SECRET: ${{ secrets.TWILIO_API_SECRET }}
  TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
  TWILIO_CHAT_SERVICE_SID: ${{ secrets.TWILIO_CHAT_SERVICE_SID }}
  SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
  SENDGRID_DOMAIN: ${{ secrets.SENDGRID_DOMAIN }}

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Authenticate with NPM
        run: echo "//npm.pkg.github.com/:_authToken=$GITHUB_TOKEN" > ~/.npmrc
      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npx tsc
      - name: Set up stack for End-to-End tests
        run: |
          npx cdk -a 'node dist/aws/cloudformation-sourcecode.js' deploy
          npx cdk bootstrap
          npx cdk deploy --require-approval never
          npx cdk -a 'node dist/aws/cloudformation-test-extras.js' deploy --require-approval never
      - name: Configure Twilio
        run: |
          aws ssm put-parameter --name /$STACK_NAME/twilio/apiKey --type String --value $TWILIO_API_KEY
          aws ssm put-parameter --name /$STACK_NAME/twilio/apiSecret --type SecureString --value $TWILIO_API_SECRET
          aws ssm put-parameter --name /$STACK_NAME/twilio/accountSID --type String --value $TWILIO_ACCOUNT_SID
          aws ssm put-parameter --name /$STACK_NAME/twilio/chatServiceSID --type String --value $TWILIO_CHAT_SERVICE_SID
          node dist/scripts/fixPermissions.js
      - name: Create and publish JWT keypair
        run: |
          export KEY_ID=`uuidgen`
          echo -n $KEY_ID > .keyid
          openssl ecparam -genkey -name secp256r1 -noout -out ecdsa-p256-${KEY_ID}-private.pem
          openssl ec -in ecdsa-p256-${KEY_ID}-private.pem -pubout -out ecdsa-p256-${KEY_ID}-public.pem
          export WEBSITE_BUCKET=`aws cloudformation describe-stacks --stack-name $STACK_NAME-test-extras | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="bucketName") | .OutputValue'`
          node dist/scripts/publish-test-key.js
          export WEBSITE_URL=`aws cloudformation describe-stacks --stack-name $STACK_NAME-test-extras | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="bucketWebsiteUrl") | .OutputValue'`
          aws configure set cli_follow_urlparam false
          aws ssm put-parameter --name /$STACK_NAME/chat/jwks.json --type String --value $WEBSITE_URL/.well-known/jwks.json
      - name: End-to-End Tests
        run: |
          export KEY_ID=`cat .keyid`
          npm run test:e2e
      - name: Semantic release
        continue-on-error: true
        run: |
          npm i --no-save semantic-release
          npx semantic-release
      - name: Get logs
        if: always()
        run: node dist/scripts/logs.js
      - name: Clean up End-to-End test resources
        if: always()
        run: |
          npx cdk destroy -f '*'
          # Delete website bucket
          WEBSITE_BUCKET=`aws cloudformation describe-stacks --stack-name $STACK_NAME-test-extras | jq -r '.Stacks[0].Outputs[0].OutputValue'`
          aws s3 rb s3://$WEBSITE_BUCKET --force
          # Delete the test-extras stack
          npx cdk -a 'node dist/aws/cloudformation-test-extras.js' destroy -f '*'
          # Delete sourcecode bucket
          SOURCE_CODE_BUCKET=`aws cloudformation describe-stacks --stack-name $STACK_NAME-sourcecode | jq -r '.Stacks[0].Outputs[0].OutputValue'`
          aws s3 rb s3://$SOURCE_CODE_BUCKET --force
          # Delete the sourceode stack
          npx cdk -a 'node dist/aws/cloudformation-sourcecode.js' destroy -f '*'
          # Delete SSM Parameters
          aws ssm delete-parameters --names /$STACK_NAME/twilio/apiKey /$STACK_NAME/twilio/apiSecret /$STACK_NAME/twilio/accountSID /$STACK_NAME/twilio/chatServiceSID /$STACK_NAME/chat/jwks.json
